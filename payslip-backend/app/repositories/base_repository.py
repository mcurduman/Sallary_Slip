from typing import Protocol, TypeVar, Generic, Iterable, Optional
from sqlalchemy.ext.asyncio import AsyncSession
T = TypeVar("T")
ID = TypeVar("ID", int, str)

class BaseRepository(Protocol, Generic[T, ID]):
    def __init__(self, session: AsyncSession):
        self._session = session
    async def get(self, id: ID) -> Optional[T]: ...
    async def create(self, entity: T) -> T: ...
    async def get_all(self) -> Iterable[T]: ...
    async def delete(self, id: ID) -> None: ...
    async def update(self, entity: T) -> T: ...