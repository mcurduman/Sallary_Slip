"""Schema changes

Revision ID: a1f4b2fbda79
Revises: 939aaf64c1ae
Create Date: 2025-10-31 09:11:19.800462

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a1f4b2fbda79'
down_revision: Union[str, Sequence[str], None] = '939aaf64c1ae'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('monthly_timecard',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('worked_days', sa.Integer(), nullable=True),
    sa.Column('paid_leave_days', sa.Integer(), nullable=True),
    sa.Column('unpaid_leave_days', sa.Integer(), nullable=True),
    sa.Column('worked_hours', sa.Integer(), nullable=True),
    sa.Column('overtime_hours', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('timecard')
    op.add_column('emp_deduction', sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=True))
    op.drop_column('emp_deduction', 'default_amount')
    op.add_column('employee', sa.Column('country_of_id', sa.String(), nullable=True))
    op.add_column('employee', sa.Column('termination_status', sa.String(), nullable=True))
    op.drop_constraint(op.f('position_grade_key'), 'position', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('position_grade_key'), 'position', ['grade'], postgresql_nulls_not_distinct=False)
    op.drop_column('employee', 'termination_status')
    op.drop_column('employee', 'country_of_id')
    op.add_column('emp_deduction', sa.Column('default_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True))
    op.drop_column('emp_deduction', 'amount')
    op.create_table('timecard',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('month', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('worked_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('paid_leave_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unpaid_leave_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('worked_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('overtime_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['employee.id'], name=op.f('timecard_approved_by_fkey')),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], name=op.f('timecard_employee_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('timecard_pkey'))
    )
    op.drop_table('monthly_timecard')
    # ### end Alembic commands ###
